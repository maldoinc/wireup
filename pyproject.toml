[tool.poetry]
name = "wireup"
version = "0.14.0"
description = "Python Dependency Injection Library"
authors = ["Aldo Mateli <aldo.mateli@gmail.com>"]
license = "MIT"
readme = "readme.md"
homepage = "https://github.com/maldoinc/wireup"
packages = [{ include = "wireup" }]
keywords = [
    "flask",
    "django",
    "injector",
    "dependency injection",
    "dependency injection container",
    "dependency injector",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Framework :: Django",
    "Framework :: Flask",
    "Framework :: FastAPI",
    "Framework :: aiohttp",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Repository = "https://github.com/maldoinc/wireup"
Documentation = "https://maldoinc.github.io/wireup/"
Changelog = "https://github.com/maldoinc/wireup/releases"

[tool.poetry.dependencies]
python = "^3.8"
graphlib2 = { version = "^0.4.7", python = ">=3.8,<3.9" }
pytest = "^8.3.3"

[tool.poetry.group.dev.dependencies]
ruff = "0.6.1"
setuptools = "^68.0.0"
mkdocs = "^1.5.2"
mkdocs-material = "^9.4.14"
mkdocstrings-python = "^1.6.2"
mkdocs-open-in-new-tab = "^1.0.2"
mike = "^1.1.2"
typing-extensions = "^4.7.1"
mypy = "1.11.1"
coverage = "^7.3.2"
tox = "^4.14.2"
pytest-asyncio = "^0.24.0"

[tool.ruff]
target-version = "py38"
line-length = 120
src = ["wireup"]
lint.fixable = ["ALL"]
lint.select = ["ALL"]
lint.ignore = [
    "ANN401", # Allow returning any. Parameter bag has to store/retrieve arbitraty types.
    "PT009",  # Prefer using assertEqual instead of plain asserts
    "ANN101", # Exclude self from type hint requirement,
    "TD003",  # Exclude "missing issue link for todos",
    "FIX002", # Disable "Line contains to do, consider resolving the issue". It will be done, in due time.
    "D100",   # Disable undocumented public module. The definitions themselves will be documented
    "D101",
    "D102",
    "D104",   # Same as above, disable missing docstring in public package,
    "D203",   # Ignore "one blank line before class". Using "no blank lines before class rule".
    "D213",   # Disable "Summary must go into next line"
    "D107",   # Disable required docs for __init. Can be redundant if class also has them.
    "A003",   # Disable "shadows builtin". OverrideManager.set was flagged by this

    # Disable as they may cause conflicts with ruff formatter
    "COM812",
    "ISC001",
]
[tool.ruff.lint.per-file-ignores]
"test/*" = [
    "D",
    "ANN",
    "PT",
    "SLF001",
    "T201",
    "EM101",
    "TRY",
    "FA100",
    "B008",
    "RUF009",
    "F401",
    "SIM117",
    "S101",
    "PLR2004",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Taken from https://coverage.readthedocs.io/en/latest/excluding.html
[tool.coverage.report]
omit = ["test/*"]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
exclude = "wireup.integration"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
